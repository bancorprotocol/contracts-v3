/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export type WithdrawalAmountsStruct = {
  totalAmount: BigNumberish;
  baseTokenAmount: BigNumberish;
  bntAmount: BigNumberish;
};

export type WithdrawalAmountsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber
] & {
  totalAmount: BigNumber;
  baseTokenAmount: BigNumber;
  bntAmount: BigNumber;
};

export interface BancorNetworkInfoInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "bnt()": FunctionFragment;
    "bntGovernance()": FunctionFragment;
    "bntPool()": FunctionFragment;
    "externalProtectionVault()": FunctionFragment;
    "externalRewardsVault()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isReadyForWithdrawal(uint256)": FunctionFragment;
    "masterVault()": FunctionFragment;
    "network()": FunctionFragment;
    "networkSettings()": FunctionFragment;
    "pendingWithdrawals()": FunctionFragment;
    "poolMigrator()": FunctionFragment;
    "poolToken(address)": FunctionFragment;
    "poolTokenToUnderlying(address,uint256)": FunctionFragment;
    "postUpgrade(bytes)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "roleAdmin()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tradeInputByTargetAmount(address,address,uint256)": FunctionFragment;
    "tradeOutputBySourceAmount(address,address,uint256)": FunctionFragment;
    "underlyingToPoolToken(address,uint256)": FunctionFragment;
    "vbnt()": FunctionFragment;
    "vbntGovernance()": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawalAmounts(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "bnt"
      | "bntGovernance"
      | "bntPool"
      | "externalProtectionVault"
      | "externalRewardsVault"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isReadyForWithdrawal"
      | "masterVault"
      | "network"
      | "networkSettings"
      | "pendingWithdrawals"
      | "poolMigrator"
      | "poolToken"
      | "poolTokenToUnderlying"
      | "postUpgrade"
      | "renounceRole"
      | "revokeRole"
      | "roleAdmin"
      | "supportsInterface"
      | "tradeInputByTargetAmount"
      | "tradeOutputBySourceAmount"
      | "underlyingToPoolToken"
      | "vbnt"
      | "vbntGovernance"
      | "version"
      | "withdrawalAmounts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bnt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bntGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bntPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "externalProtectionVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalRewardsVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyForWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "network", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "networkSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolMigrator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolTokenToUnderlying",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "roleAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeInputByTargetAmount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeOutputBySourceAmount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToPoolToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vbnt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vbntGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalAmounts",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bntGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bntPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalProtectionVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalRewardsVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isReadyForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "network", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "networkSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolTokenToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeInputByTargetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeOutputBySourceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToPoolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vbnt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vbntGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalAmounts",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface BancorNetworkInfo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BancorNetworkInfoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bnt(overrides?: CallOverrides): Promise<[string]>;

    bntGovernance(overrides?: CallOverrides): Promise<[string]>;

    bntPool(overrides?: CallOverrides): Promise<[string]>;

    externalProtectionVault(overrides?: CallOverrides): Promise<[string]>;

    externalRewardsVault(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isReadyForWithdrawal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterVault(overrides?: CallOverrides): Promise<[string]>;

    network(overrides?: CallOverrides): Promise<[string]>;

    networkSettings(overrides?: CallOverrides): Promise<[string]>;

    pendingWithdrawals(overrides?: CallOverrides): Promise<[string]>;

    poolMigrator(overrides?: CallOverrides): Promise<[string]>;

    poolToken(pool: string, overrides?: CallOverrides): Promise<[string]>;

    poolTokenToUnderlying(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    postUpgrade(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleAdmin(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tradeInputByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tradeOutputBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingToPoolToken(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vbnt(overrides?: CallOverrides): Promise<[string]>;

    vbntGovernance(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdrawalAmounts(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[WithdrawalAmountsStructOutput]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  bnt(overrides?: CallOverrides): Promise<string>;

  bntGovernance(overrides?: CallOverrides): Promise<string>;

  bntPool(overrides?: CallOverrides): Promise<string>;

  externalProtectionVault(overrides?: CallOverrides): Promise<string>;

  externalRewardsVault(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isReadyForWithdrawal(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterVault(overrides?: CallOverrides): Promise<string>;

  network(overrides?: CallOverrides): Promise<string>;

  networkSettings(overrides?: CallOverrides): Promise<string>;

  pendingWithdrawals(overrides?: CallOverrides): Promise<string>;

  poolMigrator(overrides?: CallOverrides): Promise<string>;

  poolToken(pool: string, overrides?: CallOverrides): Promise<string>;

  poolTokenToUnderlying(
    pool: string,
    poolTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  postUpgrade(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleAdmin(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tradeInputByTargetAmount(
    sourceToken: string,
    targetToken: string,
    targetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tradeOutputBySourceAmount(
    sourceToken: string,
    targetToken: string,
    sourceAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingToPoolToken(
    pool: string,
    tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vbnt(overrides?: CallOverrides): Promise<string>;

  vbntGovernance(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<number>;

  withdrawalAmounts(
    pool: string,
    poolTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<WithdrawalAmountsStructOutput>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    bnt(overrides?: CallOverrides): Promise<string>;

    bntGovernance(overrides?: CallOverrides): Promise<string>;

    bntPool(overrides?: CallOverrides): Promise<string>;

    externalProtectionVault(overrides?: CallOverrides): Promise<string>;

    externalRewardsVault(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isReadyForWithdrawal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterVault(overrides?: CallOverrides): Promise<string>;

    network(overrides?: CallOverrides): Promise<string>;

    networkSettings(overrides?: CallOverrides): Promise<string>;

    pendingWithdrawals(overrides?: CallOverrides): Promise<string>;

    poolMigrator(overrides?: CallOverrides): Promise<string>;

    poolToken(pool: string, overrides?: CallOverrides): Promise<string>;

    poolTokenToUnderlying(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postUpgrade(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleAdmin(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tradeInputByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeOutputBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToPoolToken(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vbnt(overrides?: CallOverrides): Promise<string>;

    vbntGovernance(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<number>;

    withdrawalAmounts(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<WithdrawalAmountsStructOutput>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bnt(overrides?: CallOverrides): Promise<BigNumber>;

    bntGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    bntPool(overrides?: CallOverrides): Promise<BigNumber>;

    externalProtectionVault(overrides?: CallOverrides): Promise<BigNumber>;

    externalRewardsVault(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isReadyForWithdrawal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterVault(overrides?: CallOverrides): Promise<BigNumber>;

    network(overrides?: CallOverrides): Promise<BigNumber>;

    networkSettings(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    poolMigrator(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolTokenToUnderlying(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postUpgrade(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeInputByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeOutputBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToPoolToken(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vbnt(overrides?: CallOverrides): Promise<BigNumber>;

    vbntGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAmounts(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bnt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bntGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bntPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    externalProtectionVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    externalRewardsVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isReadyForWithdrawal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    network(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolMigrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolTokenToUnderlying(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postUpgrade(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeInputByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeOutputBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToPoolToken(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vbnt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vbntGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalAmounts(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
