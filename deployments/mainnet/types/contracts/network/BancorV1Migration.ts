/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface BancorV1MigrationInterface extends utils.Interface {
  functions: {
    "migratePoolTokens(address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "migratePoolTokens" | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "migratePoolTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "migratePoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "PositionMigrated(address,address,address,address,uint256,uint256,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PositionMigrated"): EventFragment;
}

export interface PositionMigratedEventObject {
  provider: string;
  poolToken: string;
  tokenA: string;
  tokenB: string;
  amountA: BigNumber;
  amountB: BigNumber;
  migratedA: boolean;
  migratedB: boolean;
}
export type PositionMigratedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, boolean, boolean],
  PositionMigratedEventObject
>;

export type PositionMigratedEventFilter =
  TypedEventFilter<PositionMigratedEvent>;

export interface BancorV1Migration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BancorV1MigrationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    migratePoolTokens(
      poolToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  migratePoolTokens(
    poolToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    migratePoolTokens(
      poolToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "PositionMigrated(address,address,address,address,uint256,uint256,bool,bool)"(
      provider?: string | null,
      poolToken?: null,
      tokenA?: string | null,
      tokenB?: string | null,
      amountA?: null,
      amountB?: null,
      migratedA?: null,
      migratedB?: null
    ): PositionMigratedEventFilter;
    PositionMigrated(
      provider?: string | null,
      poolToken?: null,
      tokenA?: string | null,
      tokenB?: string | null,
      amountA?: null,
      amountB?: null,
      migratedA?: null,
      migratedB?: null
    ): PositionMigratedEventFilter;
  };

  estimateGas: {
    migratePoolTokens(
      poolToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    migratePoolTokens(
      poolToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
